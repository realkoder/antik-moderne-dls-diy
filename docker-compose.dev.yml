# ===========================================================
#       üê≥ üê≥ üê≥ üê≥ üê≥ DOCKER COMPOSE DEV üê≥ üê≥ üê≥ üê≥ üê≥
# ===========================================================
# docker-compose up: docker-compose -f docker-compose.dev.yml up
# docker-compose logs: docker-compose -f docker-compose.dev.yml logs -f
# docker-compose down: docker-compose -f docker-compose.dev.yml down --rmi all --remove-orphans // Deletes all images - JUST MAKE SURE VOLUMES WONT BE DELETED


networks:
  microservices:
    driver: bridge

services:
  postgresdb:
    container_name: postgresdb
    build:
      context: .
      dockerfile: Dockerfile.postgres.dev
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: postgres
      PGPASSWORD: admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./backend/users/src/db/migrations:/docker-entrypoint-initdb.d/migrations_users  # Users migrations
      # - ./backend/products/src/db/migrations:/docker-entrypoint-initdb.d/migrations_products  # Products migrations
      # - ./backend/baskets/src/db/migrations:/docker-entrypoint-initdb.d/migrations_baskets  # Baskets migrations
      # - ./init-migrations.sh:/docker-entrypoint-initdb.d/init-migrations.sh  # Mount the init script
    networks:
      - microservices
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  run-migrations:
    image: postgres:alpine
    depends_on:
      postgresdb:
        condition: service_healthy
    volumes:
      - ./backend/users/src/db/migrations:/migrations_users
      - ./backend/products/src/db/migrations:/migrations_products
      - ./backend/baskets/src/db/migrations:/migrations_baskets
      - ./init-migrations.sh:/docker-entrypoint-initdb.d/init-migrations.sh
    command: ["sh", "-c", "/docker-entrypoint-initdb.d/init-migrations.sh"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      PGHOST: postgresdb
      PGPORT: 5432
    networks:
      - microservices

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672 # GUI and management PORT
      - 15692:15692 # Port for exposing metrics to Prometheus
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - microservices
    command: rabbitmq-server -rabbitmq_management listener [{port,15672}] -rabbitmq_prometheus [{port,15692}]

  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    env_file:
      - ./frontend/.env.local
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - 3000:5173
    networks:
        - microservices

  auth-gatekeeper-service:
    restart: always
    container_name: auth-gatekeeper-service
    build:
      context: ./backend/auth-gatekeeper
      target: develop
      dockerfile: Dockerfile.dev
    env_file:
      - ./backend/auth-gatekeeper/.env.local
    volumes:
      - ./backend/auth-gatekeeper:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
      - 3001:3001
    networks:
        - microservices

  baskets-service:
    restart: always
    container_name: baskets-service
    build:
      context: ./backend/baskets
      target: develop
      dockerfile: Dockerfile.dev
    env_file:
      - ./backend/baskets/.env.local
    environment:
      - ENV=docker-compose
    volumes:
      - ./backend/baskets:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
      - 3002:3002
    networks:
        - microservices

  emails-service:
    restart: always
    container_name: emails-service
    build:
      context: ./backend/emails
      target: develop
      dockerfile: Dockerfile.dev
    env_file:
      - ./backend/emails/.env.local
    volumes:
      - ./backend/emails:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
    - 3003:3003
    networks:
        - microservices

  products-service:
    restart: always
    container_name: products-service
    build:
      context: ./backend/products
      target: develop
      dockerfile: Dockerfile.dev
    env_file:
      - ./backend/products/.env.local
    environment:
      - ENV=docker-compose
    volumes:
      - ./backend/products:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
      - 3004:3004
    networks:
        - microservices

  users-service:
    restart: always
    container_name: users-service
    build:
      context: ./backend/users
      target: develop
      dockerfile: Dockerfile.dev
    env_file:
      - ./backend/users/.env.local
    environment:
      - ENV=docker-compose
    volumes:
      - ./backend/users:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
    - 3005:3005
    networks:
        - microservices

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheusValues.dev.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "9091:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices


volumes:
  postgres_data: {}
  grafana_data: {} # Want to save the dashboard and other configs for Grafana
  
  