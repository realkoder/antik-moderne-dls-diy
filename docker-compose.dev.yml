networks:
  microservices:
    driver: bridge

services:

  postgresdb:
    container_name: postgresdb
    build:
      context: .
      dockerfile: Dockerfile.postgres
    ports:
      - "5431:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/users/src/db/migrations:/docker-entrypoint-initdb.d/migrations_users  # Users migrations
      - ./backend/products/src/db/migrations:/docker-entrypoint-initdb.d/migrations_products  # Products migrations
      - ./backend/baskets/src/db/migrations:/docker-entrypoint-initdb.d/migrations_baskets  # Baskets migrations
      - ./init-migrations.sh:/docker-entrypoint-initdb.d/init-migrations.sh  # Mount the init script
    networks:
      - microservices

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - microservices

  # frontend-app:
  #   restart: always
  #   build:
  #     context: ./frontend-app
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./frontend-app:/app
  #     - /app/node_modules
  #   ports:
  #     - 3000:3000
  #   networks:
  #       - microservices

  auth-service:
    restart: always
    build:
      context: ./backend/auth
      target: develop
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/auth:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
      - 3001:3001
    networks:
        - microservices

  baskets-service:
    restart: always
    build:
      context: ./backend/baskets
      target: develop
      dockerfile: Dockerfile.dev
    environment:
      - ENV=docker-compose
    volumes:
      - ./backend/baskets:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
      - 3002:3002
    networks:
        - microservices

  emails-service:
    restart: always
    build:
      context: ./backend/emails
      target: develop
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend/emails:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
    - 3003:3003
    networks:
        - microservices

  products-service:
    restart: always
    build:
      context: ./backend/products
      target: develop
      dockerfile: Dockerfile.dev
    environment:
      - ENV=docker-compose
    volumes:
      - ./backend/products:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
      - 3004:3004
    networks:
        - microservices

  users-service:
    restart: always
    build:
      context: ./backend/users
      target: develop
      dockerfile: Dockerfile.dev
    environment:
      - ENV=docker-compose
    volumes:
      - ./backend/users:/app
    depends_on:
      - postgresdb
      - rabbitmq
    ports:
    - 3005:3005
    networks:
        - microservices

volumes:
  postgres_data: {}